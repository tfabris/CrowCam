#!/bin/bash

#------------------------------------------------------------------------------
# crowcam-config - Global variables used in CrowCam scripts.
#------------------------------------------------------------------------------
# Please see the accompanying file REAMDE.md for setup instructions. Web Link:
#        https://github.com/tfabris/CrowCam/blob/master/README.md
#
# The scripts in this project don't work "out of the box", they need some
# configuration. All details are found in README.md, so please look there
# and follow the instructions.
#------------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# Startup configuration variables 
# ----------------------------------------------------------------------------

# This value points to the parent YouTube live stream that these scripts are
# controlling. It must be the live stream's main parent URL, not the address
# of an individual video within the channel. For instance, it must not be an
# archived video, or a link to a particular day's live stream. You can tell
# whether it is the correct link by looking at the the style of the URL. The
# correct value is https://www.youtube.com/channel/(Your_Channel_ID)/live.
#
#   Right:    https://www.youtube.com/channel/xyzxyzxyzxyzxyzxyzxyzxyz/live
#   Wrong:    https://www.youtube.com/watch?v=xyzxyzxyzxyz
#
# This value is used when checking if the stream is working, and it is used
# when ensuring that the stream's DVR functionality stays working.
#
# Update this value to point to your channel's live stream.
#
youTubeUrl="https://www.youtube.com/channel/UCUxIqdJJpXBnjaEy5yq1wZQ/live"

# Title of your LiveStream videos. This will be the default title of all new
# streams when the script must create a new stream to fix a dead one. This will
# also be the default title of videos that will be cleaned up at regular
# intervals. Only video titles which match this string exactly, will be
# deleted.
#
# Note: Will also be used for checking that it's OK to work with the stream
# key of this stream name, as part of the fix for GitHub issue #27.
#
# Update this value to be the exact same title as your live stream.
#
titleToDelete="CrowCam"

# Title of the playlist which holds the live video archives, which you want to
# be periodically cleaned out of old videos. Can be "uploads" if desired
# ("uploads" is the internal code name for the default "My Videos" playlist),
# but it can also be a custom user-created playlist name, if you've configured
# your videos to be automatically added to a particular playlist.
#
# Update this value to be either "uploads" or the name the playlist where you
# want to clean out old videos named $titleToDelete.
# 
playlistToClean="CrowCam Archives"

# The number of days in the past that we will let old videos live before
# cleaning them up. For example, if this number is 5, and a video named
# $titleToDelete was made 4 days ago, it will not be deleted, but a
# $titleToDelete video made 5 days ago will be deleted.
#
# Set this to the number of days you wish to keep old videos before deletion.
#
dateBufferDays=9


# Desired visibility/privacy of the live stream. Most live streams are set to
# public, but you may have reasons for wanting to keep it unlisted or private.
# Because YouTube intermittently glitches and clobbers this value, the script
# will attempt to maintain this and keep it at the correct setting. Valid
# values are "private", "public", or "unlisted", case-sensitive.
#
# Set this to the desired visibility/privacy of this video stream, either 
# "private", "public", or "unlisted".
#
desiredStreamVisibility="public"


# Control whether or not to turn the YouTube stream on at sunrise and off at
# sunset. This is in response to GitHub issue #65.
# 
# Set sunriseSunsetControl to true if you wish for the camera to turn on at
# sunrise and off at sunset. Set it to false if you want the camera to run all
# the time.
#
# Important note: If you set this to "false", then you must manually turn your
# stream on and off yourself, by toggling the "Live: On" button in the
# Surveillance Station, in the "Live Broadcast" feature screen.
#
# Recommended value: true
sunriseSunsetControl=true


# Camera location for using in a Google Search. Can be a zip code, a city name,
# or something else which might result in a Google search that returns the
# correct sunrise or sunset time. Special bonus: If you leave the location
# blank (""), Google will just search on the word "Sunrise" or "Sunset" and
# automatically attempt to determine your location, based on where the query is
# originating from. Maybe this will work for your particular situation, feel
# free to experiment with leaving it blank. The code simply performs a Google
# search with a search string where the word "Sunrise" or "Sunset" precedes
# this location string. Examples: 
#   location="98125"        Google search will be "Sunrise 98125" etc.
#   location="Seattle,WA"   Google search will be "Sunrise Seattle,WA" etc.
#   location="Bangladesh"   Google search will be "Sunset Bangladesh" etc.
#   location=""             Google search will be "Sunset" etc.
# Note: Must not have any spaces in the location string.
#
# Set this value to either blank ("") or your location. No spaces.
#
location=""


# Difference, in minutes, that you want to perform the startup and shutdown of
# the video stream during any given day. A value of zero would mean exactly on
# time, negative numbers are preceding sunrise or sunset, and positive numbers
# are after sunrise or sunset. For instance, setting startServiceOffset=0
# would mean that the stream will start exactly at sunrise, setting
# startServiceOffset=-30 would mean that the stream will start 30 minutes
# before sunrise, and stopServiceOffset=60 would mean that the stream will
# stop 60 minutes after sunset.
#
# Set these to your desired start and stop offset values.
# 
startServiceOffset=-40
stopServiceOffset=60


# maxVideoLengthSeconds - Maximum length, in seconds, that an archived video
# stream segment is allowed to get, before the code will attempt to split the
# video stream into another segment. If the stream been running for longer
# than this configured value, then the script will split the stream into
# multiple segments by "bouncing" it, i.e., temporarily stopping the stream
# for a couple of minutes. 
#
# Problems can occur with YouTube video archives if we try to record a stream
# which lasts too long in any given day. The first problem is that the maximum
# length of a YouTube video seems to be about 12 hours (actually, more like
# 11:55 in practice), and so if we livestream for longer than that, the video
# archive for that day will be truncated. The second problem is that there is a
# "processing" phase on YouTube, where the stream is being converted into an
# archive video, and this "processing" takes an unexpectedly long time if the
# video file is too large. So splitting the video during the day, even if it's
# not having any network troubles, is useful to do.
#
# Recommend setting maxVideoLengthSeconds to 4 hours, because this allows the
# segment to be post-processed by YouTube relatively quickly. I have tried
# setting it to 7 hours, to split a summer day's archive into two segments,
# but YouTube often takes too long to post-process 7-hour videos, making it
# hard to edit the video, or to insert accurate timestamps into the video
# description, unless I wait a few days before performing the edits.
#
# If you don't care about quickly the video gets post-processed by YouTube,
# then I recommend setting the value to a length which is slightly less
# than the winter solstice daylight hours in your region, and/or slightly less
# than half of the summer solstice daylight hours. For instance, if the
# shortest day of your year is going to be 8.5 hours, and the longest day of
# your year is going to be about 16 hours, then set maxVideoLengthSeconds to
# something like 6-8 hours. You can also set it for a shorter length, if you
# prefer the day's video to be split up into even smaller segments, however, be
# advised that each split point will cause the video stream to go down for a
# couple of minutes, so don't make this number too small, or else you'll have
# too many moments of downtime during the day.
#
# Some possible values could be:
#    maxVideoLengthSeconds=42900    (11 hours and 55 minutes, max value)
#    maxVideoLengthSeconds=39600    (11 hours)
#    maxVideoLengthSeconds=28800    (8 hours)
#    maxVideoLengthSeconds=25200    (7 hours)
#    maxVideoLengthSeconds=21600    (6 hours)
#    maxVideoLengthSeconds=14400    (4 hours, recommended)
maxVideoLengthSeconds=14400


# Grace period for $maxVideoLengthSeconds (above), in seconds.
#
# This helps prevent a "short segment" at the end of the broadcast day.
#
# If the video is going to be split into smaller sections based on the value of
# $maxVideoLengthSeconds, but the last section is near the end of the broadcast
# day, this allows the video segment to stretch slightly longer than the
# maximum, so that there isn't a "short segment" left behind at the end of the
# day. For example: If you have configured $maxVideoLengthSeconds to six hours,
# and the day is going to be about 13 hours long, then normally you'd get three
# video segments that day: Two segments of six hours in length, and one final
# segment of only one hour in length, before it shuts down for the night. But
# if you set this value to one hour (3600 seconds), then, if it's near the end
# of the day, it will allow the last segment of the day to stretch an
# additional hour, to seven hours total, so you would get a nicer set of two
# video segments that day: A six hour segment followed by a seven hour segment.
# 
# Set this to a comfortable value that is the shortest that you'd want a short
# segment to be. For instance, if you don't mind having a 60-minute video
# archive segment near the end of the broadcast day, but a 45-minute segment
# would bother you, then set this to 3600 seconds (60 minutes).
# 
# The value must be between 0 and (42900 - $maxVideoLengthSeconds). The latter
# is so that this doesn't accidentally make the video longer than 11:55 (the
# YouTube maximum length).
#
# Recommended value: 3600 seconds (one hour).
# 
maxVideoLengthGracePeriod=3600


# If this hourlyQuickBounce flag is set to "true", then the live YouTube video
# stream will be bounced once, quickly, near the top of each hour. This is an
# attempt to work around the audio desynchronization problem described in
# GitHub issue #14. This will cause a very brief skip in the live YouTube
# video stream once per hour, but hopefully will reset the audio/video timing
# synch at the same time, thus keeping the audio and video mostly in synch
# most of the time.
#
# Set this to true to bounce the stream hourly, false to skip the bounce.
#
# Recommended value: true
#
hourlyQuickBounce=false


# Special feature which forces the YouTube stream to be always-off. This
# should only be enabled in certain unusual situations. This feature allows
# you to leave the script running, but have the script deliberately shut down
# the YouTube stream, and keep it shut down.
#
# Set forceStreamShutdown to true, for the script to shut down the YouTube
# stream and exit, every time it runs. Most of the other features of the
# script will not do anything because they will be skipped when it's in this
# mode.
#
# Recommended value: false
#
forceStreamShutdown=false 


# The webApiRootUrl is the base URL of the API of the Synology NAS we are
# accessing, from the point of view of the script running on the NAS itself
# (i.e., loopback/localhost). This value is used when querying the Synology API
# to find out if the video stream is turned on or off, and to set the video
# stream's state.
# 
# Do not change this value.
#
webApiRootUrl="http://localhost:5000/webapi"


# This is an alternate version of the Synology API's base URL, if we are
# accessing it from a shell prompt on a test computer in test/debug mode,
# if that computer is located on the same LAN as the Synology NAS. This value
# is used only in test/debug mode.
# 
# Update this value to the address of your Synology NAS on your LAN.
#
if [[ $debugMode == *"Home"* ]]
then
  webApiRootUrl="http://192.168.0.88:5000/webapi"
fi


# Name of the Synology Surveillance Station service that we are checking, to
# see if it is up. If the service is not up, it will be assumed that it has
# been deliberately turned off on the NAS, and these scripts will skip the
# steps which are not applicable if the service is shut down. To test this
# behavior, you can stop and start this service on the Synology NAS either by
# going to the Package Center GUI and disabling the "Surveillance Station"
# package temporarily, or by connecting to the synology shell via SSH, and
# issuing commands such as:
#      sudo synoservicectl --stop pkgctl-SurveillanceStation
#      sudo synoservicectl --start pkgctl-SurveillanceStation
#      sudo synoservicectl --status pkgctl-SurveillanceStation
#
# Do not change this value.
#
serviceName="pkgctl-SurveillanceStation"


# When running these scripts in test/debug mode on Mac, the scripts must check
# for a different serviceName. Since the Mac is not running the
# "pkgctl-SurveillanceStation" program, the scripts must check for some other
# program instead, otherwise they will skip most of their behavior.
#
# Set this to a program on your Mac which you can easily stop and start.
#
if [[ $debugMode == *"Mac"* ]]
then
  serviceName="Google Chrome"
fi


# When running these scripts in test/debug mode on Windows, the scripts must
# check for a different serviceName. Since the computer is not running the
# "pkgctl-SurveillanceStation" program, the scripts must check for some other
# program instead, otherwise they will skip most of their behavior.
#
# Set this to the name of a Windows service which you can easily stop and start
# from the "Services.msc" control panel on Windows. To see all running service
# names on Windows, type "net start" by itself at a DOS command prompt.
#
if [[ $debugMode == *"Win"* ]]
then
  serviceName="Adobe Acrobat Update Service"
fi


# Name of the "YouTube Live Broadcast" feature that we are turning on and off.
# This is only used in log messages. 
#
# Do not change this value.
#
featureName="YouTube Live Broadcast"


# Some sugar required for Wget to successfully retrieve a search from Google.
# Without this, Google gives you a "403 forbidden" message when you try to
# use Wget to perform a Google search.
#
# Do not change this value.
#
userAgent="Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"


# Create a variable for the API credentials file, we will read from this file.
#
# Do not change this value.
#
apicreds="$DIR/api-creds"


# Create a variable for the "client_id.json" file, we will read from this file.
#
# Do not change this value.
#
clientIdJson="$DIR/client_id.json"


# Create a variable for the "crowcam-tokens" file, we will write to this file.
#
# Do not change this value.
#
crowcamTokens="$DIR/crowcam-tokens"


# Create a variable for the "crowcam-sunrise" file, we will write to this file.
#
# Do not change this value.
#
crowcamSunrise="$DIR/crowcam-sunrise"


# Create a variable for the "crowcam-sunset" file, we will write to this file.
#
# Do not change this value.
#
crowcamSunset="$DIR/crowcam-sunset"


# Create a variable for the "crowcam-camstart" file, we will write to this file.
#
# Do not change this value.
#
crowcamCamstart="$DIR/crowcam-camstart"


# Cookie file name that will save the login/auth cookie for the web API. This
# allows subsequent calls to the Synology API to succeed after the initial
# authentication has been successful. Subsequent calls simply use the cookie.
#
# Do not change this value.
#
cookieFileName="wgetcookies.txt"


# DNS name that we will ping to see if the network is up.
#
# Do not change this value.
#
TestSite=8.8.8.8


# The configOverride is a path and file name pointing to an override config
# file which allows you to create a secondary config file which overrides
# this config file. If you wish to override settings in this file, you can
# create a file in this same directory called "crowcam-override-config" and
# then populate it with any variables you like. Note: File should be in this
# same kind of format and begin with a shebang (aka #!/bin/bash) and should
# only contain variables which you wish to override.
# 
# Do not change this value.
#
configOverride="$DIR/crowcam-override-config"


# Code to load any override variables found in the override config.
#
# Do not change this code.
#
if [ -e "$configOverride" ]
then
  echo "Loading override config $configOverride"
  source "$configOverride"
fi


